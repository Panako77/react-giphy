{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","console","log","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","oldArray","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","key","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"yOAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1BC,QAAQC,IAAIF,GAEZ,MAAoCG,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OAGI,0BAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BV,GAAe,SAACW,GAAD,OAAeP,GAAf,mBAA8BO,OAC7CN,EAAc,OASd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAtBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAsBfG,YAAY,iB,uBC9BXC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAKFC,EAAOD,EAAKE,KAAK,SAACC,GAAS,IAAD,EAC5B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXF,IAAG,UAAEA,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAdvB,kBAqBZM,GArBY,4CAAH,sDCCXO,G,KAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAMF,EAAY,EAAZA,IAGrC,OACI,yBAAKM,UAAU,wDACZ,yBAAKC,IAAKP,EAAKQ,IAAKN,IACpB,+BAAMA,EAAN,QCDEO,EAAU,SAAC,GAAmB,IAAhBnB,EAAe,EAAfA,SAIvB,ECRwB,SAAEA,GAE1B,MAA0Bf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA6BA,OApBAC,qBAAW,WACPxB,EAASC,GACRwB,MAAM,SAAChB,GAEJiB,YAAW,WACPH,EAAS,CACLf,KAAMC,EACNY,SAAS,MAEd,UAMR,CAAEpB,IAKEqB,EDvBwBK,CAAc1B,GAAjCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAOpB,OAGI,oCACI,gCAAOpB,EAAP,KAECoB,GAAW,uBAAGJ,UAAU,sDAAb,iBAGZ,yBAAKA,UAAU,aAGPH,EAAOJ,KAAK,SAAAC,GAGR,OAAO,kBAAC,EAAD,eACKiB,IAAKjB,EAAIC,IAILD,UEEzBkB,EArCM,WAIjB,MAAoC3C,mBAAS,CAAC,cAAe,QAAS,cAAtE,mBAAO4C,EAAP,KAAmB/C,EAAnB,KAQA,OACI,oCACI,8CAEA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAIA,4BAEQ+C,EAAWpB,KAAK,SAACT,EAAU8B,GAEvB,OAAO,kBAAC,EAAD,CACKH,IAAM3B,EACNA,SAAWA,U,MCtB/C+B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.c1e74d9a.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    console.log(setCategories);\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handelInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // console.log('submit hecho');\r\n        if (inputValue.trim().length > 2) {\r\n            \r\n            setCategories( (oldArray) => [inputValue, ...oldArray ]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <form onSubmit={ handleSubmit }>\r\n            {/* <h2>Add Category</h2> */}\r\n            <input \r\n                type=\"text\" \r\n                value={ inputValue } \r\n                onChange={ handelInputChange } \r\n                placeholder='Buscar gif' \r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\n    export const getGifs = async( category ) => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=837Un2vAdD5xj4r5bnKj0DmYkMTdFjwi`;\r\n        const resp = await fetch( url);\r\n        const { data } = await resp.json();\r\n        /**\r\n         * para recoger los datos que necesitamos en objetos mapeamos 'map()'\r\n         *  la respuesta que nos da la data en una nueva 'const'\r\n         */\r\n        const gifs = data.map( (img) => {\r\n            return{\r\n                id: img.id,\r\n                title: img.title,\r\n                // con el '?' preguntamos si estÃ¡ para que lo use\r\n                img: img.images?.downsized_medium.url,\r\n            }\r\n\r\n        })\r\n\r\n        // console.log( gifs);\r\n        // setImages( gifs);\r\n        return gifs;\r\n    }\r\n\r\n","import React from 'react';\r\nimport 'animate.css';\r\n\r\n// export const GifGridItem = ( {id, title, img} ) => {\r\nexport const GifGridItem = ( { id, title,img  } ) => {\r\n\r\n \r\n    return (\r\n        <div className='card animate__animated animate__fadeIn animate__slow'>\r\n           <img src={img} alt={title} />\r\n           <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import React, { useState, useEffect } from 'react'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport 'animate.css';\r\n\r\n\r\n\r\nexport const GifGrid = ( { category }) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    const {data:images, loading} = useFetchGifs( category );\r\n\r\n    // useEffect()  movido al hook personalizado useFetchHook()\r\n  \r\n\r\n\r\n\r\n    return (\r\n                // <div> { count } </div>\r\n                // <button onClick={ () => setCount( count + 1 ) }> ADD </button>\r\n        <>\r\n            <h3> { category } </h3>\r\n\r\n            {loading && <p className='animate__animated animate__flash animate__infinite'> Cargando... </p>}\r\n\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map( img => {                    \r\n                    // {images.map(( {id, title, img} ) => {                    \r\n                        // return <li key={id}> {title} </li>\r\n                        return <GifGridItem\r\n                                    key={img.id} \r\n                                    \r\n                                    // con el operador spread mandamos la desestructuracion de las propiedades del objeto\r\n                                    \r\n                                    {...img}\r\n                                />\r\n                    })\r\n                }\r\n                \r\n            </div>        \r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n       /**\r\n     * el use effect hace que el componente se ejecute solo una vez\r\n     */\r\n    useEffect( () => {\r\n        getGifs( category )\r\n        .then( (gifs) => {\r\n\r\n            setTimeout(() => {\r\n                setState({ \r\n                    data: gifs,\r\n                    loading: false \r\n                })\r\n            }, 3000);\r\n\r\n        })\r\n\r\n        // cuando el elemento recibido es usado en una unica funcion se puede resumir asi:\r\n        // .catch( err => console.log());\r\n    }, [ category]);\r\n\r\n\r\n\r\n\r\n    return state; //{ data: [], loading: true}\r\n} \r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['Dragon Ball', 'Arale', 'Samurai X'];\r\n\r\n    const [categories, setCategories] = useState(['Dragon Ball', 'Arale', 'Samurai X']);\r\n    // const [categories, setCategories] = useState(['Dr Slump']);\r\n\r\n    // const handleAdd = () => {\r\n    //     // setCategories( (oldArray) => [...oldArray, 'Arale']);\r\n    //     setCategories( (oldArray) => ['Arale',...oldArray]);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2> GifExpertApp </h2>\r\n            {/* <AddCategory /> */}\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr />\r\n\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( (category, i )  => {\r\n                        // return (<li key={category}> {category} </li>);\r\n                        return <GifGrid \r\n                                    key={ category}    \r\n                                    category={ category} \r\n                                />\r\n                    })\r\n                }\r\n            </ol>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\n// const divRoot = document.querySelector('#root');\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}